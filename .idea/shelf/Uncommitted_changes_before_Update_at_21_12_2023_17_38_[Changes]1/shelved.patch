Index: p4/src/app/Components/grid/grid.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><style>\r\n  :root {\r\n    --vert-size: 500px;\r\n    --horiz-size: 800px;\r\n  }\r\n\r\n  .background{\r\n    background-color: gray;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n\r\n  .grid-background{\r\n    background-color: #00008c;\r\n    min-width: 800px;\r\n    min-height: 500px;\r\n    max-width: 800px;\r\n    max-height: 500px;\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n\r\n</style>\r\n\r\n<div class=\"background\">\r\n  <div class=\"grid-background\">\r\n    <app-hole *ngFor=\"let hole of tab\"></app-hole>\r\n  </div>\r\n</div>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/p4/src/app/Components/grid/grid.component.html b/p4/src/app/Components/grid/grid.component.html
--- a/p4/src/app/Components/grid/grid.component.html	
+++ b/p4/src/app/Components/grid/grid.component.html	
@@ -1,11 +1,11 @@
 <style>
   :root {
-    --vert-size: 500px;
-    --horiz-size: 800px;
+    --vert-size: 800px;
+    --horiz-size: 1700px;
   }
 
   .background{
-    background-color: gray;
+    /*background-color: gray;*/
     display: flex;
     flex-direction: row;
     align-items: center;
@@ -13,11 +13,10 @@
   }
 
   .grid-background{
-    background-color: #00008c;
-    min-width: 800px;
-    min-height: 500px;
-    max-width: 800px;
-    max-height: 500px;
+    min-width: 1700px;
+    max-width: 1700px;
+    min-height: 800px;
+    max-height: 800px;
     display: flex;
     flex-direction: column;
   }
@@ -26,6 +25,10 @@
 
 <div class="background">
   <div class="grid-background">
-    <app-hole *ngFor="let hole of tab"></app-hole>
+    <div class="canvas">
+      <canvas #myCanvas width="800" height= "600">
+        Your browser does not support the canvas element.
+      </canvas>
+    </div>
   </div>
 </div>
Index: p4/src/app/app.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"fr\">\r\n<head>\r\n  <meta charset=\"utf-8\">\r\n  <title>p4</title>\r\n</head>\r\n<body>\r\n<app-grid></app-grid>\r\n</body>\r\n</html>\r\n\r\n\r\n<router-outlet></router-outlet>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/p4/src/app/app.component.html b/p4/src/app/app.component.html
--- a/p4/src/app/app.component.html	
+++ b/p4/src/app/app.component.html	
@@ -1,13 +1,23 @@
-<!DOCTYPE html>
-<html lang="fr">
-<head>
-  <meta charset="utf-8">
-  <title>p4</title>
-</head>
-<body>
-<app-grid></app-grid>
-</body>
-</html>
+<style>
+  .mainDiv{
+    min-width: 1800px;
+    max-width: 1800px;
+    min-height: 900px;
+    max-height: 900px;
+    display: flex;
+    flex-direction: row;
+    align-items: center;
+    justify-content: center;
+  }
+
+</style>
+
+
+<main>
+  <div class="mainDiv">
+    <app-grid></app-grid>
+  </div>
 
+</main>
 
-<router-outlet></router-outlet>
+  <router-outlet></router-outlet>
Index: p4/src/app/Components/grid/grid.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Component } from '@angular/core';\r\nimport {HoleComponent} from \"../hole/hole.component\";\r\n\r\n@Component({\r\n  selector: 'app-grid',\r\n  standalone: true,\r\n  imports: [\r\n    HoleComponent\r\n  ],\r\n  templateUrl: './grid.component.html',\r\n  styleUrl: './grid.component.css'\r\n})\r\nexport class GridComponent {\r\n\r\n  tab: number[][] = [[0,0,0,0,0,0,0],\r\n                    [0,0,0,0,0,0,0],\r\n                    [0,0,0,0,0,0,0],\r\n                    [0,0,0,0,0,0,0],\r\n                    [0,0,0,0,0,0,0],\r\n                    [0,0,0,0,0,0,0]];\r\n\r\n  public get_color(nb : number){\r\n    let color;\r\n    switch(nb) {\r\n      case 0: {\r\n        color = \"red\"\r\n        break;\r\n      }\r\n      case 1: {\r\n        color = \"red\"\r\n        break;\r\n      }\r\n      case 2: {\r\n        color = \"yellow\"\r\n        break;\r\n      }\r\n    }\r\n    return color;\r\n    };\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/p4/src/app/Components/grid/grid.component.ts b/p4/src/app/Components/grid/grid.component.ts
--- a/p4/src/app/Components/grid/grid.component.ts	
+++ b/p4/src/app/Components/grid/grid.component.ts	
@@ -1,4 +1,4 @@
-import { Component } from '@angular/core';
+import {AfterViewInit, Component, ElementRef, ViewChild} from '@angular/core';
 import {HoleComponent} from "../hole/hole.component";
 
 @Component({
@@ -10,32 +10,76 @@
   templateUrl: './grid.component.html',
   styleUrl: './grid.component.css'
 })
-export class GridComponent {
+export class GridComponent implements AfterViewInit {
 
   tab: number[][] = [[0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0],
-                    [0,0,0,0,0,0,0],
+                    [0,0,0,0,0,2,0],
                     [0,0,0,0,0,0,0],
-                    [0,0,0,0,0,0,0],
-                    [0,0,0,0,0,0,0]];
+                    [0,0,2,0,1,0,0],
+                    [0,1,1,1,2,0,0]];
+  @ViewChild('canvas')
+  canvas!: HTMLCanvasElement;
+
+  context!: CanvasRenderingContext2D | null;
+
+
+  constructor(){}
+
+  @ViewChild('myCanvas', { static: true }) myCanvas!: ElementRef<HTMLCanvasElement>;
 
-  public get_color(nb : number){
-    let color;
-    switch(nb) {
-      case 0: {
-        color = "red"
-        break;
-      }
-      case 1: {
-        color = "red"
-        break;
-      }
-      case 2: {
-        color = "yellow"
-        break;
+  ngAfterViewInit() {
+    if (this.myCanvas) {
+
+      const canvas: HTMLCanvasElement = this.myCanvas.nativeElement;
+      const context: CanvasRenderingContext2D | null = canvas.getContext('2d');
+      this.canvas = canvas;
+      this.context = context;
+
+
+      if (context) {
+        // Use beginPath and other Canvas API methods
+
+        this.update().then(r => 0)
+      } else {
+        console.error('2D context is null');
+      }
+    }
+  }
+
+  setGrid(tab: number[][]){
+    this.tab = tab;
+  }
+
+  async update() {
+    if (this.context) {
+      this.context.clearRect(0,0,800,500)
+      // Your drawing code using this.context
+      this.context.fillStyle = 'blue';
+      this.context.fillRect(0,0,800,500);
+
+      for(let i = 0; i < 6; i++){
+        for(let j = 0; j < 7; j++){
+          this.context.beginPath();
+          switch(this.tab[i][j]){
+            case 0:
+              this.context.fillStyle = "grey";
+              break;
+            case 1:
+              this.context.fillStyle = "yellow";
+              break;
+            case 2:
+              this.context.fillStyle = "red";
+              break;
+          }
+          this.context.arc(j*114+55, i*80+50, 35, 0, 2 * Math.PI);
+          this.context.fill();
+        }
       }
     }
-    return color;
-    };
+
+    await new Promise(r => setTimeout(r, (1000/30)));
+    requestAnimationFrame(() => this.update());
+  }
 
 }
Index: p4/src/app/app.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport {GridComponent} from \"./Components/grid/grid.component\";\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterOutlet, GridComponent],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.css'\r\n})\r\nexport class AppComponent {\r\n  title = 'p4';\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/p4/src/app/app.component.ts b/p4/src/app/app.component.ts
--- a/p4/src/app/app.component.ts	
+++ b/p4/src/app/app.component.ts	
@@ -12,4 +12,7 @@
 })
 export class AppComponent {
   title = 'p4';
+
+
+
 }
Index: p4/src/app/Components/hole/hole.component.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><style>\r\n\r\n  .dot{\r\n    height: 30px;\r\n    width: 30px;\r\n    border-radius: 50%;\r\n    display: inline-block;\r\n  }\r\n\r\n  .grey{\r\n    background-color: #999999;\r\n  }\r\n\r\n  .red{\r\n    background-color: #ba0000;\r\n  }\r\n\r\n  .yellow{\r\n    background-color: #c8be14;\r\n  }\r\n\r\n</style>\r\n\r\n\r\n<span class=\"dot\"></span>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/p4/src/app/Components/hole/hole.component.html b/p4/src/app/Components/hole/hole.component.html
--- a/p4/src/app/Components/hole/hole.component.html	
+++ b/p4/src/app/Components/hole/hole.component.html	
@@ -21,5 +21,4 @@
 
 </style>
 
-
-<span class="dot"></span>
+<span class="dot {this.setColor()}" ></span>
Index: p4/src/app/Components/hole/hole.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-hole',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './hole.component.html',\r\n  styleUrl: './hole.component.css'\r\n})\r\nexport class HoleComponent {\r\n\r\n  private colorClass : string = \"gray\"\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/p4/src/app/Components/hole/hole.component.ts b/p4/src/app/Components/hole/hole.component.ts
--- a/p4/src/app/Components/hole/hole.component.ts	
+++ b/p4/src/app/Components/hole/hole.component.ts	
@@ -1,4 +1,4 @@
-import { Component } from '@angular/core';
+import {Component, Input} from '@angular/core';
 
 @Component({
   selector: 'app-hole',
@@ -9,8 +9,24 @@
 })
 export class HoleComponent {
 
-  private colorClass : string = "gray"
+  colorClass : string = "gray";
+  @Input() colorNumber!: number;
 
-
+  public set_color(){
+    switch(this.colorNumber) {
+      case 0: {
+        this.colorClass = "gray";
+        break;
+      }
+      case 1: {
+        this.colorClass = "red";
+        break;
+      }
+      case 2: {
+        this.colorClass = "yellow";
+        break;
+      }
+    }
+  };
 
 }
